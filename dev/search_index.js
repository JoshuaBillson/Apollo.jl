var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Apollo","category":"page"},{"location":"#Apollo","page":"Home","title":"Apollo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Apollo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Apollo]","category":"page"},{"location":"#Apollo.AbstractMetric","page":"Home","title":"Apollo.AbstractMetric","text":"Abstract supertype of all evaluation metrics.\n\n\n\n\n\n","category":"type"},{"location":"#Apollo.Metric","page":"Home","title":"Apollo.Metric","text":"Metric(measure::AbstractMetric)\n\nConstruct a Metric object to track the state for the given AbstractMetric.\n\n\n\n\n\n","category":"type"},{"location":"#Apollo.TDim","page":"Home","title":"Apollo.TDim","text":"abstract type TDim end struct W <: TDim end struct H <: TDim end struct C <: TDim end struct L <: TDim end struct N <: TDim end\n\n\n\n\n\n","category":"type"},{"location":"#Apollo._dims_match-Tuple{DimensionalData.AbstractDimArray, Any}","page":"Home","title":"Apollo._dims_match","text":"Check that raster contains all of the dimensions in dims with no extra dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.compute","page":"Home","title":"Apollo.compute","text":"compute(m::AbstractMetric, state)\ncompute(m::Metric, state)\n\nCompute the performance measure from the current state.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.evaluate-Tuple{Any, Any, Vararg{AbstractMetric}}","page":"Home","title":"Apollo.evaluate","text":"evaluate(model, data, measures...)\n\nEvaluate the model's performance on the provided data.\n\nParameters\n\nmodel: A callable of the form ŷ = model(x).\ndata: An iterable of (x, y) values.\nmeasures: A set of AbstractMetrics to use for evaluating model.\n\nReturns\n\nA NamedTuple containing the performance metrics for the given model.\n\nExample\n\nevaluate(DataLoader((xsampler, ysampler)), Accuracy(), MIoU(2)) do x\n    model(x) |> Flux.sigmoid\nend\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.init","page":"Home","title":"Apollo.init","text":"init(m::AbstractMetric)\n\nReturns the initial state of the performance measure, which will be subsequently updated for each mini-batch of labels and predictions.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.name","page":"Home","title":"Apollo.name","text":"name(m::AbstractMetric)\nname(m::Metric)\n\nHuman readable name of the given performance measure.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.update","page":"Home","title":"Apollo.update","text":"update(m::AbstractMetric, state, ŷ, y)\n\nReturn the new state for the given batch of labels and predictions.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.update!-Tuple{Metric, Any, Any}","page":"Home","title":"Apollo.update!","text":"update!(metric::Metric, ŷ, y)\n\nUpdate the metric state for the next batch of labels and predictions.\n\n\n\n\n\n","category":"method"}]
}
