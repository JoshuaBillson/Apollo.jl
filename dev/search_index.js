var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Apollo","category":"page"},{"location":"#Apollo","page":"Home","title":"Apollo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Apollo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Apollo]","category":"page"},{"location":"#Apollo.AbstractMetric","page":"Home","title":"Apollo.AbstractMetric","text":"Abstract supertype of all evaluation metrics.\n\n\n\n\n\n","category":"type"},{"location":"#Apollo.Metric","page":"Home","title":"Apollo.Metric","text":"Metric(measure::AbstractMetric)\n\nConstruct a Metric object to track the state for the given AbstractMetric.\n\n\n\n\n\n","category":"type"},{"location":"#Apollo.ObsView","page":"Home","title":"Apollo.ObsView","text":"ObsView(data, indices)\n\nConstruct an iterator over data\n\n\n\n\n\n","category":"type"},{"location":"#Apollo.compute","page":"Home","title":"Apollo.compute","text":"compute(m::AbstractMetric, state)\ncompute(m::Metric, state)\n\nCompute the performance measure from the current state.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.evaluate-Tuple{Any, Any, Vararg{AbstractMetric}}","page":"Home","title":"Apollo.evaluate","text":"evaluate(model, data, measures...)\n\nEvaluate the model's performance on the provided data.\n\nParameters\n\nmodel: A callable that takes a single batch from data and returns a tuple of the form (ŷ, y).\ndata: An iterable of (x, y) values.\nmeasures: A set of AbstractMetrics to use for evaluating model.\n\nReturns\n\nA NamedTuple containing the performance metrics for the given model.\n\nExample\n\nevaluate(DataLoader((xsampler, ysampler)), Accuracy(), MIoU(2)) do (x, y)\n    ŷ = model(x) |> Flux.sigmoid\n    return (ŷ, y)\nend\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.folddims-Tuple{Any, Rasters.AbstractRaster}","page":"Home","title":"Apollo.folddims","text":"folddims(f, xs::AbstractRaster; dim=Band)\n\nReduce the collection of non-missing values to a singular value in each slice of x WRT dims.\n\nArguments\n\nf: A function that reduces an array of values to a singular value.\nx: An AbstractRaster over which we want to fold.\ndims: The dimension used to generate each slice that is passed to f.\n\nExample\n\njulia> μ = folddims(mean, raster, dims=Band)\n6-element Vector{Float32}:\n 0.09044644\n 0.23737456\n 0.30892986\n 0.33931717\n 0.16186203\n 0.076255515\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.init","page":"Home","title":"Apollo.init","text":"init(m::AbstractMetric)\n\nReturns the initial state of the performance measure, which will be subsequently updated for each mini-batch of labels and predictions.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.name","page":"Home","title":"Apollo.name","text":"name(m::AbstractMetric)\nname(m::Metric)\n\nHuman readable name of the given performance measure.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.splitobs-Tuple{Any}","page":"Home","title":"Apollo.splitobs","text":"splitobs(data; at=0.8, shuffle=true)\n\nReturn a set of indices that splits the given observations according to the given break points.\n\nArguments\n\ndata: Any type that implements Base.length(). \nat: The fractions at which to split data. \nshuffle: If true, shuffles the indices before splitting. \n\nExample\n\njulia> splitobs(1:100, at=(0.7, 0.2), shuffle=false)\n3-element Vector{Vector{Int64}}:\n [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  61, 62, 63, 64, 65, 66, 67, 68, 69, 70]\n [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.transform-Tuple{AbstractTransform, DType, Any}","page":"Home","title":"Apollo.transform","text":"transform(t::AbstractTransform, dtype::DType, x)\ntransform(t::AbstractTransform, dtypes::Tuple, x::Tuple)\n\nApply the transformation t to the input x with data type dtype.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.update","page":"Home","title":"Apollo.update","text":"update(m::AbstractMetric, state, ŷ, y)\n\nReturn the new state for the given batch of labels and predictions.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.update!-Tuple{Metric, Any, Any}","page":"Home","title":"Apollo.update!","text":"update!(metric::Metric, ŷ, y)\n\nUpdate the metric state for the next batch of labels and predictions.\n\n\n\n\n\n","category":"method"}]
}
