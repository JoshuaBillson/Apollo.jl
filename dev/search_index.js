var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Apollo","category":"page"},{"location":"#Apollo","page":"Home","title":"Apollo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Apollo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Apollo]","category":"page"},{"location":"#Apollo.AbstractMetric","page":"Home","title":"Apollo.AbstractMetric","text":"Abstract supertype of all evaluation metrics.\n\n\n\n\n\n","category":"type"},{"location":"#Apollo.Metric","page":"Home","title":"Apollo.Metric","text":"Metric(measure::AbstractMetric)\n\nConstruct a Metric object to track the state for the given AbstractMetric.\n\n\n\n\n\n","category":"type"},{"location":"#Apollo.ObsView","page":"Home","title":"Apollo.ObsView","text":"ObsView(data, indices)\n\nConstruct an iterator over data\n\n\n\n\n\n","category":"type"},{"location":"#Apollo.UNet-Tuple{}","page":"Home","title":"Apollo.UNet","text":"UNet(;encoder=StandardEncoder(batch_norm=true), input=nothing, channels=3, nclasses=1, batch_norm=true)\n\nConstruct a UNet model.\n\nKeywords\n\nencoder: The encoder to use for the UNet model. Defaults to the standard encoder.\ninput: The input block, which defaults to two convolutional layers as with standard UNet.\nchannels: The number of input channels to use when input=nothing. Ignored when input is specified.\nnclasses: The number of output channels produced by the head.\nbatch_norm: Use batch normalization after each convolutional layer (default=true).\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.compute","page":"Home","title":"Apollo.compute","text":"compute(m::AbstractMetric, state)\ncompute(m::Metric)\n\nCompute the performance measure from the current state.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.crop","page":"Home","title":"Apollo.crop","text":"crop(x::AbstractArray, size, ul=(1,1))\n\nCrop a tile equal to size out of x with an upper-left corner defined by ul.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.dropobs-Tuple{Any, AbstractVector{Int64}}","page":"Home","title":"Apollo.dropobs","text":"dropobs(data, obs::AbstractVector{Int})\n\nRemove all observations from data whose index corresponds to those in obs.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.epoch!-Tuple{Tracker}","page":"Home","title":"Apollo.epoch!","text":"epoch!(tracker::Tracker)\n\nStore the metric value for the current epoch and reset the state.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.evaluate-Tuple{Any, Any, Vararg{AbstractMetric}}","page":"Home","title":"Apollo.evaluate","text":"evaluate(model, data, measures...)\n\nEvaluate the model's performance on the provided data.\n\nParameters\n\nmodel: A callable that takes a single batch from data and returns a tuple of the form (ŷ, y).\ndata: An iterable of (x, y) values.\nmeasures: A set of AbstractMetrics to use for evaluating model.\n\nReturns\n\nA NamedTuple containing the performance metrics for the given model.\n\nExample\n\nevaluate(DataLoader((xsampler, ysampler)), Accuracy(), MIoU(2)) do (x, y)\n    ŷ = model(x) |> Flux.sigmoid\n    return (ŷ, y)\nend\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.filterobs-Tuple{Any, Any}","page":"Home","title":"Apollo.filterobs","text":"filterobs(f, data)\n\nRemove all observations from data for which f returns false.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.folddims-Tuple{Any, Rasters.AbstractRaster}","page":"Home","title":"Apollo.folddims","text":"folddims(f, xs::AbstractRaster; dim=Band)\n\nReduce the collection of non-missing values to a singular value in each slice of x WRT dims.\n\nArguments\n\nf: A function that reduces an array of values to a singular value.\nx: An AbstractRaster over which we want to fold.\ndims: The dimension used to generate each slice that is passed to f.\n\nExample\n\njulia> μ = folddims(mean, raster, dims=Band)\n6-element Vector{Float32}:\n 0.09044644\n 0.23737456\n 0.30892986\n 0.33931717\n 0.16186203\n 0.076255515\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.init","page":"Home","title":"Apollo.init","text":"init(m::AbstractMetric)\n\nReturns the initial state of the performance measure, which will be subsequently updated for each mini-batch of labels and predictions.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.mapobs-Tuple{Any, Any}","page":"Home","title":"Apollo.mapobs","text":"mapobs(f, data)\n\nLazily apply the function f to each element in data.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.mosaicview-Tuple{Tuple{Int64, Int64}, Vararg{Any}}","page":"Home","title":"Apollo.mosaicview","text":"mosaicview(size::Tuple{Int,Int}, imgs...)\n\nPlot a mosaic of images with size (rows, cols).\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.name-Tuple{M} where M<:AbstractMetric","page":"Home","title":"Apollo.name","text":"name(m::AbstractMetric)\nname(m::Metric)\n\nHuman readable name of the given performance measure.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.putdim-Tuple{Rasters.AbstractRaster, Tuple}","page":"Home","title":"Apollo.putdim","text":"putdim(raster::AbstractRaster, dims::Tuple)\nputdim(x::AbstractRaster, ::Type{Rasters.DD.Dimension})\n\nAdd the provided singleton dim(s) to the given raster. Does nothing if dim is already present.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.repeatobs-Tuple{Any, Int64}","page":"Home","title":"Apollo.repeatobs","text":"repeatobs(data, n::Int)\n\nCreate a new view which iterates over every element in data n times.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.reset!-Tuple{Apollo.Metric}","page":"Home","title":"Apollo.reset!","text":"reset!(metric::Metric)\n\nReset the metric's state.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.sampleobs-Tuple{Any, Any, Int64}","page":"Home","title":"Apollo.sampleobs","text":"sampleobs([rng], data, n)\n\nRandomly sample n elements from data without replacement. rng may be optionally provided for reproducible results.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.shuffleobs-Tuple{Any, Any}","page":"Home","title":"Apollo.shuffleobs","text":"shuffleobs([rng], data)\n\nRandomly shuffle the elements of data. Provide rng for reproducible results.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.splitobs-Tuple{Any}","page":"Home","title":"Apollo.splitobs","text":"splitobs(data; at=0.8, shuffle=true)\n\nReturn a set of indices that splits the given observations according to the given break points.\n\nArguments\n\ndata: Any type that implements Base.length(). \nat: The fractions at which to split data. \nshuffle: If true, shuffles the indices before splitting. \n\nExample\n\njulia> splitobs(1:100, at=(0.7, 0.2), shuffle=false)\n3-element Vector{Vector{Int64}}:\n [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  61, 62, 63, 64, 65, 66, 67, 68, 69, 70]\n [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.step!-Tuple{Tracker, String, Any, Any}","page":"Home","title":"Apollo.step!","text":"step!(tracker::Tracker, ŷ, y)\n\nUpdate the metric's state for the current batch of predictions and labels.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.takeobs-Tuple{Any, AbstractVector{Int64}}","page":"Home","title":"Apollo.takeobs","text":"takeobs(data, obs::AbstractVector{Int})\n\nTake all observations from data whose index corresponds to obs while removing everything else.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.update","page":"Home","title":"Apollo.update","text":"update(m::AbstractMetric, state, ŷ, y)\n\nReturn the new state for the given batch of labels and predictions.\n\n\n\n\n\n","category":"function"},{"location":"#Apollo.update!-Tuple{Apollo.Metric, Any, Any}","page":"Home","title":"Apollo.update!","text":"update!(metric::Metric, ŷ, y)\nupdate!(tracker::Tracker, ŷ, y)\n\nUpdate the metric state for the next batch of labels and predictions.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.vec2array-Union{Tuple{N}, Tuple{T}, Tuple{AbstractVector, AbstractArray{T, N}, Int64}} where {T, N}","page":"Home","title":"Apollo.vec2array","text":"vec2array(x::AbstractVector, to::AbstractArray, dim::Int)\n\nReshape the vector x to have the same number of dimensions as to. Missing dimensions  are added as singletons while the dimension corresponding to dim will be filled with the values of x.\n\n\n\n\n\n","category":"method"},{"location":"#Apollo.zipobs-Tuple","page":"Home","title":"Apollo.zipobs","text":"zipobs(data...)\n\nCreate a new iterator where the elements of each iterator in data are returned as a tuple.\n\nExample\n\njulia> zipobs(1:5, 41:45, rand([:cat, :dog], 5)) |> collect\n5-element Vector{Any}:\n (1, 41, :dog)\n (2, 42, :cat)\n (3, 43, :cat)\n (4, 44, :dog)\n (5, 45, :cat)\n\n\n\n\n\n","category":"method"}]
}
